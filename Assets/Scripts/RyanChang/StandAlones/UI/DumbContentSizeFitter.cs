using UnityEngine;
using UnityEngine.EventSystems;
using UnityEngine.UI;

/// <summary>
/// A "dumbed" down version of the content size fitter that can be used with
/// layout groups.
/// 
/// <br/>
/// 
/// Authors: Ryan Chang (2023)
/// </summary>
[ExecuteAlways]
public class DumbContentSizeFitter : UIBehaviour, ILayoutSelfController
{
    #region Variables
    #region User Settings
    [SerializeField]
    private ContentSizeFitter.FitMode horizontalFit;

    [SerializeField]
    private ContentSizeFitter.FitMode verticalFit;
    #endregion

    #region Autogenerated
    /// <summary>
    /// The rect transform.
    /// </summary>
    private RectTransform rectT;

    private DrivenRectTransformTracker tracker;
    #endregion
    #endregion

    #region Properties
    /// <inheritdoc cref="rectT"/>
    private RectTransform RectT
    {
        get
        {
            if (!rectT)
                rectT = transform as RectTransform;

            return rectT;
        }
    }
    #endregion

    #region Methods
    #region Instantiation and Destruction
    protected override void OnEnable()
    {
        base.OnEnable();
    }

    protected override void OnDisable()
    {
        tracker.Clear();
        base.OnDisable();
    }
    #endregion

    #region ILayoutSelfController Implementation
    /// <summary>
    /// <see cref="SetLayoutHorizontal"/> and <see cref="SetLayoutVertical"/>
    /// are called when the fitter needs to be updated.
    /// </summary>
    public void SetLayoutHorizontal()
    {
        tracker.Clear();
        Vector2 size = RectT.sizeDelta;

        switch (horizontalFit)
        {
            case ContentSizeFitter.FitMode.MinSize:
                size.x = LayoutUtility.GetMinWidth(RectT);
                tracker.Add(this, RectT, DrivenTransformProperties.SizeDeltaX);
                break;
            case ContentSizeFitter.FitMode.PreferredSize:
                size.x = LayoutUtility.GetPreferredWidth(RectT);
                tracker.Add(this, RectT, DrivenTransformProperties.SizeDeltaX);
                break;
        }

        RectT.sizeDelta = size;
    }

    /// <inheritdoc cref="SetLayoutHorizontal"/>
    public void SetLayoutVertical()
    {
        // WARNING: Do NOT put tracker.Clear(); here!
        // SetLayoutHorizontal() is always called first.
        Vector2 size = RectT.sizeDelta;

        switch (verticalFit)
        {
            case ContentSizeFitter.FitMode.MinSize:
                size.y = LayoutUtility.GetMinHeight(RectT);
                tracker.Add(this, RectT, DrivenTransformProperties.SizeDeltaY);
                break;
            case ContentSizeFitter.FitMode.PreferredSize:
                size.y = LayoutUtility.GetPreferredHeight(RectT);
                tracker.Add(this, RectT, DrivenTransformProperties.SizeDeltaY);
                break;
        }

        RectT.sizeDelta = size;
    }
    #endregion
    #endregion
}